@page "/edit-restaurant/{restaurantId}/{token}"

@using Orderino.Shared.DTOs;
@using Orderino.Shared.Models;
@using BlazorInputFile;
@using System.IO;
@using System.Net.Http
@using System.Text.Json

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar


<center>
    <div class="menu-items-container-background">
        <div class="menu-container">
            <div class="col-md-8 mb-4">
                <div class="card mb-4" style="background-color: white; border-color: #e74444; border-style: solid; border-radius: 5px; border-width: 3px;">

                    <div class="card-header py-3" style="display: grid; grid-template-columns: auto auto; justify-content: space-between; align-content: space-between;">
                        <div>
                            <h5 class="mb-0 font" style="color: #e74444; font-size: 27px;">Restaurant Management</h5>
                        </div>
                        <div style="">
                            <MudButton HtmlTag="labelRemove" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Save" OnClick="SaveChanges" Style="height: 100%;" Class="font">Save</MudButton>
                        </div>
                    </div>

                    <div class="card-body">
                        <form>
                            <div class="form-outline mb-4" style="text-align: left;">
                                <label class="form-label font" for="form7Example1" style="color: #e74444;">Restaurant Name</label>
                                <input type="text" id="form7Example1" class="form-control" @bind="restaurant.Name" style="border-color: black;" />
                            </div>

                            <div class="form-outline mb-4" style="text-align: left;">
                                <label class="form-label font" for="form7Example4" style="color: #e74444;">Address 1</label>
                                <input type="text" id="form7Example4" class="form-control" @bind="restaurant.Address.Line1" style="border-color: black;" />
                            </div>

                            <div class="form-outline mb-4" style="text-align: left;">
                                <label class="form-label font" for="form7Example4" style="color: #e74444;">Address 2</label>
                                <input type="text" id="form7Example4" class="form-control" @bind="restaurant.Address.Line2" style="border-color: black;" />
                            </div>

                            <div class="form-outline mb-4" style="text-align: left;">
                                <label class="form-label font" for="form7Example4" style="color: #e74444;">City</label>
                                <input type="text" id="form7Example4" class="form-control" @bind="restaurant.Address.City" style="border-color: black;" />
                            </div>

                            <div class="form-outline mb-4" style="text-align: left;">
                                <label class="form-label font" for="form7Example6" style="color: #e74444;">Phone</label>
                                <input type="tel" id="form7Example6" class="form-control" @bind="restaurant.Phone" style="border-color: black;" />
                            </div>

                            <div class="form-outline mb-4" style="text-align: left;">
                                <label class="form-label font" for="form7Example6" style="color: #e74444;">Email</label>
                                <input type="email" id="form7Example6" class="form-control" @bind="restaurant.Email" style="border-color: black;" />
                            </div>

                            <div class="form-outline mb-4" style="text-align: left;">
                                <label class="form-label font" for="form7Example7" style="color: #e74444;">Description</label>
                                <textarea class="form-control" id="form7Example7" rows="4" @bind="restaurant.Description" style="border-color: black;"></textarea>
                            </div>

                            <div class="form-outline mb-4" style="text-align: left;">
                                <label class="form-label font" for="form7Example7" style="color: #e74444;">Categories</label>
                                <textarea class="form-control" id="form7Example7" rows="4" @bind="menuCategories" @onfocusout="() => SplitMenuCategories()" style="border-color: black;"></textarea>
                            </div>
                        </form>

                        <div style="display: grid; grid-template-columns: auto auto; justify-content: space-between; align-content: space-between; padding-top: 30px;">
                            <div>
                                <InputFile id="bannerInput" OnChange="UploadBanner" hidden multiple />
                                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Filled.Image" Class="font" for="bannerInput" Style="color: #e74444; border-color: #e74444; border-style: solid; border-width: 1px;">Upload Banner</MudButton>
                            </div>

                            <div>
                                <MudButton HtmlTag="labelRemove" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Filled.Add" Class="font" OnClick="AddMenuItem" Style="color: #e74444; border-color: #e74444; border-style: solid; border-width: 1px;">Add Item</MudButton>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); grid-gap: 2vh; padding-top: 15px; padding-bottom: 15px;">
                @if (restaurant?.Menu != null)
                {
                    @foreach (var menuItem in restaurant.Menu)
                    {
                        <div style="background-color: white; border-color: #e74444; border-style: solid; border-radius: 5px; border-width: 2px;">
                            <div class="form-outline mb-4" style="text-align: left; padding: 10px 5px 5px 5px;">
                                <label class="form-label font" for="form7Example1" style="color: #e74444;">Name</label>
                                <input type="text" id="form7Example1" class="form-control" @bind="menuItem.Name" style="border-color: black;" />
                            </div>

                            <select class="form-control font" style="border-color: black; margin: 10px 5px 5px 5px; width: 97%;" @bind="@menuItem.MenuCategory">
                                <option class="font" value=""></option>
                                @if (restaurant?.MenuCategories != null)
                                {
                                    @foreach (var category in restaurant.MenuCategories)
                                    {

                                        if (category == menuItem.MenuCategory)
                                        {
                                            <option class="font" value="@category" selected>@category</option>
                                        }
                                        else
                                        {
                                            <option class="font" value="@category">@category</option>
                                        }
                                    }
                                }
                            </select>

                            <div class="form-outline mb-4" style="text-align: left; padding: 10px 5px 5px 5px;">
                                <label class="form-label font" for="form7Example1" style="color: #e74444;">Description</label>
                                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="menuItem.Description" style=" height: 150px; border-color: black; resize: none;" />
                            </div>

                            <div class="form-outline mb-4" style="text-align: left; padding: 10px 5px 5px 5px;">
                                <label class="form-label font" for="form7Example1" style="color: #e74444;">Price</label>
                                <input type="text" id="form7Example1" class="form-control" @bind="menuItem.Price" style="border-color: black;" />
                            </div>

                            <div style="display: grid; grid-template-columns: auto auto; justify-content: space-between; align-content: space-between; padding: 10px 5px 5px 5px;">
                                <div style="">
                                    <InputFile id="@{$"fileInput{index}"}" OnChange="(e) => UploadMenuItemPicture(e, menuItem)" hidden multiple />
                                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Filled.Image" Class="font" for="@{$"fileInput{index}"}" Style="color: #e74444; border-color: #e74444; border-style: solid; border-width: 1px;">Upload Image</MudButton>
                                    @{ index++; }
                                </div>
                                <div style="">
                                    <MudButton HtmlTag="labelRemove" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Delete" Class="font" OnClick="() => RemoveMenuItem(menuItem)" Style="height: 100%;">Remove</MudButton>
                                </div>
                            </div>

                        </div>
                    }
                }
            </div>
        </div>
    </div>
</center>


@code {

    [Parameter]
    public string restaurantId { get; set; }

    [Parameter]
    public string token { get; set; }

    private Restaurant restaurant;
    private int index = 0;
    private string _menuCategories;

    public string menuCategories
    {
        get
        {
            return _menuCategories;
        }
        set
        {
            _menuCategories = value;

            if (restaurant != null)
                restaurant.MenuCategories = SplitMenuCategories();
        }
    }

    public EditRestaurant()
    {
        restaurant = new Restaurant
        {
            Name = string.Empty,
            Email = string.Empty,
            Phone = string.Empty,
            Description = string.Empty,
            Address = new Address
            {
                Line1 = string.Empty,
                Line2 = string.Empty,
                City = string.Empty
            }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        LoginInfo loginInfo = await httpClient.GetFromJsonAsync<LoginInfo>($"login/{token}");

        if (loginInfo == null || loginInfo.TokenExpiration < DateTime.UtcNow || !loginInfo.Restaurants.Select(x => x.RestaurantId).Contains(restaurantId))
        {
            navigationManager.NavigateTo("/admin-login");
        }

        restaurant = await httpClient.GetFromJsonAsync<Restaurant>($"restaurant/{restaurantId}");

        if (restaurant?.MenuCategories == null || restaurant?.MenuCategories.Count == 0)
        {
            if (restaurant.Menu != null && restaurant.Menu.Count > 0)
            {
                restaurant.MenuCategories = restaurant.Menu.Where(x => !string.IsNullOrEmpty(x.MenuCategory)).Select(x => x.MenuCategory.Trim()).Distinct().ToList();
            }
            else
            {
                restaurant.MenuCategories = new List<string>();
            }
        }

        menuCategories = string.Join("; ", restaurant.MenuCategories.Where(x => !string.IsNullOrEmpty(x)));
    }

    private async Task SaveChanges()
    {
        restaurant.Menu.RemoveAll(x => string.IsNullOrEmpty(x.Name) || string.IsNullOrEmpty(x.MenuCategory));

        if (restaurant.Menu.Any(x => string.IsNullOrEmpty(x.Name)))
        {
            Warn("One or more products has an invalid name. Please resolve and try again.");
            return;
        }

        if (restaurant.Menu.Any(x => string.IsNullOrEmpty(x.Name)))
        {
            Warn("One or more products has an invalid category. Please resolve and try again.");
            return;
        }

        var modifyRestaurantDto = new ModifyRestaurantDto
        {
            Restaurant = restaurant,
            Token = token
        };

        var response = await httpClient.PostAsJsonAsync("restaurant-edit", modifyRestaurantDto);

        response.EnsureSuccessStatusCode();
        string content = await response.Content.ReadAsStringAsync();
        restaurant = JsonSerializer.Deserialize<Restaurant>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task UploadBanner(IFileListEntry[] e)
    {
        string imageData = await ProcessImage(e);

        var response = await httpClient.PostAsJsonAsync("upload-banner", imageData);

        response.EnsureSuccessStatusCode();
        string content = await response.Content.ReadAsStringAsync();
        ImageDto imageDto = JsonSerializer.Deserialize<ImageDto>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        restaurant.BannerUrl = imageDto.ImageUrl;
    }

    private async Task UploadMenuItemPicture(IFileListEntry[] e, OrderItem menuItem)
    {
        string imageData = await ProcessImage(e);

        var response = await httpClient.PostAsJsonAsync("upload-image", imageData);

        response.EnsureSuccessStatusCode();
        string content = await response.Content.ReadAsStringAsync();
        ImageDto imageDto = JsonSerializer.Deserialize<ImageDto>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        var itemsToAddImage = restaurant.Menu.Where(x => x.Id == menuItem.Id).ToList();
        itemsToAddImage.ForEach(x => x.ImageUrl = imageDto.ImageUrl);
    }

    private async Task<string> ProcessImage(IFileListEntry[] e)
    {
        var image = e.FirstOrDefault();

        if (image == null)
        {
            return string.Empty;
        }

        var ms = new MemoryStream();
        await image.Data.CopyToAsync(ms);
        var imageDataUrl = Convert.ToBase64String(ms.ToArray());

        return imageDataUrl;
    }

    private void AddMenuItem()
    {
        index = 0;

        restaurant.Menu.Add(new OrderItem
        {
            Id = Guid.NewGuid().ToString(),
            Name = string.Empty,
            MenuCategory = string.Empty,
            Description = string.Empty,
            Price = 0,
            RestaurantId = restaurant.Id,
            RestaurantName = restaurant.Name
        });
    }

    private void RemoveMenuItem(OrderItem menuItem)
    {
        index = 0;
        restaurant.Menu.RemoveAll(x => x.Id == menuItem.Id);
    }

    private List<string> SplitMenuCategories()
    {
        if (string.IsNullOrEmpty(menuCategories))
            return new List<string>();

        List<string> categories = menuCategories.Split(';').Where(x => !string.IsNullOrEmpty(x)).Select(x => x.Trim()).ToList();

        return categories;
    }

    private void Warn(string message)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.ShowCloseIcon = false;
        Snackbar.Add(message, Severity.Error);
    }

}