@page "/restaurant-statistics/{restaurantId}/{token}"

@using Orderino.Shared.Models;

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<style>
    .mud-input {
        position: relative;
        cursor: text;
        display: inline-flex;
        font-size: 1rem;
        box-sizing: border-box;
        align-items: center;
        font-weight: 400;
        line-height: 1.1876em;
        letter-spacing: .00938em;
        color: white;
    }

    .mud-shrink + label.mud-input-label.mud-input-label-inputcontrol {
        color: white;
        transform: translate(0,1.5px) scale(.75);
        transform-origin: top left;
    }

    .mud-typography-display-inline {
        display: inline;
        color: black;
    }

    svg g g path {
        stroke: #e74444;
    }
</style>

<div class="menu-items-container-background">
    @if (restaurantStatistic != null && restaurantStatistic.Name != null)
    {
        <div style="display: grid; grid-template-columns: 70% auto; grid-gap: 2vw; justify-content: space-between; padding-top: 50px; padding-bottom: 50px;">
            <div>
                <MudCard Style="background-color: rgba(0, 0, 0);">
                    <MudCardContent>
                        <MudText Typo="Typo.h5" Style="color: white; font-size: 30px;" Class="font" Align="Align.Left">@restaurantStatistic.Name</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: bold; color: #e74444;">@restaurantStatistic.Address.ToString()</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: bold; color: #e74444;">@restaurantStatistic.Phone</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: bold; color: #e74444;">@restaurantStatistic.Email</MudText>
                    </MudCardContent>
                </MudCard>
            </div>

            <div style="display: grid; grid-template-columns: auto auto; grid-gap: 2vw; justify-content: center; justify-items: center; align-items: center;">
                <div style="">
                    <MudDatePicker Label="Start date" @bind-Date="startDate" DateFormat="MM/yyyy" Color="Color.Primary" Editable="false" OpenTo="OpenTo.Year" FixDay="1" />
                </div>

                <div style="">
                    <MudDatePicker Label="End date" @bind-Date="endDate" DateFormat="MM/yyyy" Color="Color.Primary" Editable="false" OpenTo="OpenTo.Year" FixDay="1" />
                </div>
            </div>
        </div>

        <div style="display: grid; grid-template-columns: auto auto; grid-gap: 2vw; justify-content: space-between; margin-top: 20px; margin-bottom: 20px;">
            <div>
                <h2 class="font" style="color: white; font-size: 30px;">Top 5 best sellers</h2>
                <div style="padding: 20px; background-color: rgba(255, 255, 255); border-radius: 10px;">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@topTenBestSellersSeries" @bind-SelectedIndex="index1" XAxisLabels="@labels" Width="100%" Height="350px"></MudChart>
                </div>
            </div>
            <div>
                <h2 class="font" style="color: white; font-size: 30px;">Top 5 worst sellers</h2>
                <div style="padding: 20px; background-color: rgba(255, 255, 255); border-radius: 10px;">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@topTenWorstSellersSeries" @bind-SelectedIndex="index2" XAxisLabels="@labels" Width="100%" Height="350px"></MudChart>
                </div>
            </div>
        </div>

        <div style=" padding-top: 40px; margin-bottom: 20px;">
            <h2 class="font" style="color: white; font-size: 30px;">Product sales</h2>
            <div style="margin-left: 35%; padding: 10px 0 10px 0; display: table-cell; ">
                <select style="border-color: #e74444; background-color: black; border-style: solid; border-radius: 8px; width: 20vw; font-size: 20px; padding: 10px; color: #e74444;" @bind="@selectedMenuItemId">
                    <option value=""></option>
                    @if (restaurantStatistic != null)
                    {
                        @foreach (var menuItem in restaurantStatistic.HistoricalMenu)
                        {
                            <option value="@menuItem.Id">@menuItem.Name</option>
                        }
                    }
                </select>
            </div>
            <div style="padding: 40px; background-color: rgba(255, 255, 255); border-radius: 10px;">
                <MudChart ChartType="ChartType.Line" ChartSeries="@productSeries" @bind-SelectedIndex="index3" XAxisLabels="@labels" Width="100%" Height="350px"></MudChart>
            </div>
        </div>

        <div style=" padding-top: 40px; margin-bottom: 20px; ">
            <h2 class="font" style="color: white; font-size: 30px;">Income</h2>
            <div style="padding: 40px; background-color: rgba(255, 255, 255); border-radius: 10px;">
                <MudChart ChartType="ChartType.Line" ChartSeries="@incomeSeries" @bind-SelectedIndex="index4" XAxisLabels="@labels" Width="100%" Height="350px"></MudChart>
            </div>
        </div>

    }
</div>


@code {

    [Parameter]
    public string restaurantId { get; set; }

    [Parameter]
    public string token { get; set; }

    private RestaurantStatistic restaurantStatistic;
    private Dictionary<OrderItem, List<DateTime>> productSales;

    private DateTime? _startDate;
    private DateTime? _endDate;
    private string _selectedMenuItemId;

    public DateTime? startDate
    {
        get
        {
            return _startDate;
        }
        set
        {
            _startDate = value;
            CalculateStatistics();
        }
    }

    public DateTime? endDate
    {
        get
        {
            return _endDate;
        }
        set
        {
            _endDate = value;
            CalculateStatistics();
        }
    }

    public string selectedMenuItemId
    {
        get
        {
            return _selectedMenuItemId;
        }
        set
        {
            _selectedMenuItemId = value;
            CalculateStatistics();
        }
    }

    private int index1 = -1;
    private int index2 = -1;
    private int index3 = -1;
    private int index4 = -1;
    public List<ChartSeries> topTenBestSellersSeries;
    public List<ChartSeries> topTenWorstSellersSeries;
    public List<ChartSeries> productSeries;
    public List<ChartSeries> incomeSeries;
    public string[] labels;


    protected override async Task OnInitializedAsync()
    {
        LoginInfo loginInfo = await httpClient.GetFromJsonAsync<LoginInfo>($"login/{token}");

        if (loginInfo == null || loginInfo.TokenExpiration < DateTime.UtcNow || !loginInfo.Restaurants.Select(x => x.RestaurantId).Contains(restaurantId))
        {
            navigationManager.NavigateTo("/admin-login");
        }

        restaurantStatistic = await httpClient.GetFromJsonAsync<RestaurantStatistic>($"statistics/{restaurantId}");

        productSales = new Dictionary<OrderItem, List<DateTime>>();

        foreach (var product in restaurantStatistic.HistoricalMenu)
        {
            var dates = new List<DateTime>();

            var sales = restaurantStatistic.History.Where(x => x.OrderItemId == product.Id).ToList();

            foreach (var sale in sales)
            {
                for (int i = 0; i < sale.Quantity; i++)
                {
                    dates.Add(sale.TimeStamp);
                }
            }

            productSales[product] = dates;
        }

        startDate = restaurantStatistic.History.Select(x => x.TimeStamp).Min().Date;
        endDate = restaurantStatistic.History.Select(x => x.TimeStamp).Max().Date;

        CalculateStatistics();
    }

    private void CalculateStatistics()
    {
        var filteredSales = new Dictionary<OrderItem, List<DateTime>>();

        foreach (var entry in productSales)
        {
            var entries = entry.Value;
            entries.RemoveAll(x => x.Date < startDate?.Date || x.Date > endDate?.Date);
            filteredSales[entry.Key] = entries;
        }

        var topTenBestFilteredSales = filteredSales.OrderByDescending(x => x.Value.Count()).ThenBy(x => x.Key.Name).Take(5).ToDictionary(x => x.Key, x => x.Value);
        var topTenWorstFilteredSales = filteredSales.OrderBy(x => x.Value.Count()).ThenBy(x => x.Key.Name).Take(5).ToDictionary(x => x.Key, x => x.Value);

        var months = GetIntervalMonths();

        MakeBestWorstChartData(months, topTenBestFilteredSales, true);
        MakeBestWorstChartData(months, topTenWorstFilteredSales, false);
        CalculateIncome(months, filteredSales);
        CalculateProduct(months, filteredSales);

        labels = months.Select(x => x.ToString("MMM yy")).ToArray();
    }

    private void MakeBestWorstChartData(List<DateTime> months, Dictionary<OrderItem, List<DateTime>> topTenBestFilteredSales, bool isBest)
    {
        var series = new List<ChartSeries>();
        foreach (var sale in topTenBestFilteredSales)
        {
            var salesByMonth = new List<int>();
            foreach (var month in months)
            {
                var monthSales = sale.Value.Count(x => x.Month == month.Month && x.Year == month.Year);
                salesByMonth.Add(monthSales);
            }

            series.Add(new ChartSeries
            {
                Name = sale.Key.Name,
                Data = salesByMonth.Select(x => (double)x).ToArray()
            });
        }

        if (isBest)
        {
            topTenBestSellersSeries = series;
            return;
        }

        topTenWorstSellersSeries = series;
    }

    private void CalculateIncome(List<DateTime> months, Dictionary<OrderItem, List<DateTime>> filteredSales)
    {
        incomeSeries = new List<ChartSeries>();
        var monthlyTotals = new List<double>();

        foreach (var month in months)
        {
            double monthIncome = 0;
            foreach (var sale in filteredSales)
            {
                var itemMonthlySales = sale.Value.Count(x => x.Month == month.Month && x.Year == month.Year);
                monthIncome += itemMonthlySales * sale.Key.Price;
            }

            monthlyTotals.Add(monthIncome);
        }

        incomeSeries.Add(new ChartSeries
        {
            Name = string.Empty,
            Data = monthlyTotals.ToArray()
        });
    }

    private void CalculateProduct(List<DateTime> months, Dictionary<OrderItem, List<DateTime>> filteredSales)
    {
        productSeries = new List<ChartSeries>();
        var monthlyTotals = new List<double>();

        if (!filteredSales.Any(x => x.Key.Id == selectedMenuItemId))
            return;

        var selectedItem = filteredSales.FirstOrDefault(x => x.Key.Id == selectedMenuItemId);

        foreach (var month in months)
        {
            var itemMonthlySales = selectedItem.Value.Count(x => x.Month == month.Month && x.Year == month.Year);
            double monthIncome = itemMonthlySales * selectedItem.Key.Price;

            monthlyTotals.Add(monthIncome);
        }

        productSeries.Add(new ChartSeries
        {
            Name = selectedItem.Key.Name,
            Data = monthlyTotals.ToArray()
        });
    }

    private List<DateTime> GetIntervalMonths()
    {
        var months = new List<DateTime>();
        DateTime iterationDate = (DateTime)startDate;

        while (iterationDate <= endDate)
        {
            if (startDate.Value.Month == endDate.Value.Month && startDate.Value.Year == endDate.Value.Year)
            {
                months.Add((DateTime)iterationDate);
                break;
            }

            months.Add((DateTime)iterationDate);
            iterationDate = iterationDate.AddMonths(1);
        }

        return months;
    }

}