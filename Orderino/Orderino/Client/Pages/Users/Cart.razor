@page "/cart/{orderId}/{userId}"

@using Orderino.Shared.DTOs;
@using Orderino.Shared.Models;

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject BrowserService browserService
@inject ISnackbar Snackbar


<style>
    .mud-expand-panel.mud-panel-expanded {
        margin: 8px 0;
        border-radius: inherit;
        border-bottom: none;
        transition-delay: 0ms;
    }
</style>

<div style="margin: 0 auto;">
    <div style="display: grid; grid-gap: 2vh; padding: 20px; grid-template-columns: 1fr; justify-items: center;">
        @if (order != null && order.Items != null && order.Items.Count != 0)
        {
            <div style="max-width: 800px; border-style: solid; border-color: #e53333; border-radius: 5px; background-color: #e53333;">

                <MudExpansionPanels MultiExpansion="true" Style="background-color: black;">

                    @foreach (var keyVal in GetItemsByUser())
                    {
                        string userFullName = keyVal.Value.First().SelectorFirstName + " " + keyVal.Value.First().SelectorLastName;

                        <MudExpansionPanel IsExpanded="true">
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Style="font-size: 32px; margin-right: 12px; color: black;"></MudIcon>
                                    <MudText Typo="Typo.h5" Class="font" Style="color: black;">@userFullName</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                @foreach (var tuple in GetItemsByRestaurant(keyVal.Value.First().SelectorId))
                                {
                                    <MudExpansionPanel IsExpanded="true">
                                        <TitleContent>
                                            <div class="d-flex">
                                                <MudText Typo="Typo.h5" Class="font" Style="color: black;">@tuple.Value.First().OrderItem.RestaurantName</MudText>
                                            </div>
                                        </TitleContent>
                                        <ChildContent>
                                            @foreach (SelectedOrderItem orderItem in keyVal.Value)
                                            {
                                                if (dimensions.Width > 750)
                                                {
                                                    <div style="display: grid; grid-template-columns: 12fr 2fr;">
                                                        <div style="color: #594ae2; padding-top: 10px;">
                                                            <MudText Typo="Typo.h6" Style="color: #e74444; font-weight:bold;" Class="font"> @orderItem.OrderItem.Name </MudText>
                                                        </div>
                                                        @if(orderItem.SelectorId != userId && userId != order.Initiator.Id)
                                                        {
                                                            <div style="color: #594ae2; padding-top: 10px;">
                                                                <MudText Typo="Typo.h6" Style="color: #e74444; font-weight: bold; float: right; padding-right: 8px;" Class="font"> @orderItem.OrderItem.Quantity </MudText>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div style="display: grid; grid-template-columns: auto auto;">
                                                                <MudTextField @bind-Value="orderItem.OrderItem.Quantity" Variant="Variant.Outlined" Class="font" Style="color: black; border-color: #e74444; border-width: 1px; border-style: solid; border-radius: 5px;" Margin="Margin.Dense" @onfocusout="() => ModifyOrder(orderItem)"></MudTextField>
                                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Style="color: #e74444" @onclick="() => DeleteOrderItem(orderItem)"></MudIconButton>
                                                            </div>
                                                        }                                                        
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div style="display: grid; grid-template-columns: auto;">
                                                        <div style="color: #594ae2; padding-top: 10px;">
                                                            <MudText Typo="Typo.h6" Style="color: #e74444; font-weight:bold;" Class="font"> @orderItem.OrderItem.Name </MudText>
                                                        </div>
                                                        @if(orderItem.SelectorId != userId && userId != order.Initiator.Id)
                                                        {
                                                            <MudText Typo="Typo.h6" Style="color: #e74444; font-weight: bold; float: right; padding-right: 8px;" Class="font"> @orderItem.OrderItem.Quantity </MudText>
                                                        }
                                                        else
                                                        {
                                                            <div style="display: grid; grid-template-columns: 10fr auto;">
                                                                <MudTextField @bind-Value="orderItem.OrderItem.Quantity" Variant="Variant.Outlined" Class="font" Style="max-width: 60px; color: black; border-color: #e74444; border-width: 1px; border-style: solid; border-radius: 5px;" Margin="Margin.Dense" @onfocusout="() => ModifyOrder(orderItem)"></MudTextField>
                                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Style="color: #e74444" @onclick="() => DeleteOrderItem(orderItem)"></MudIconButton>
                                                            </div>
                                                        }                                                        
                                                    </div>
                                                }
                                            }
                                        </ChildContent>
                                    </MudExpansionPanel>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </div>
        }
        @if (order?.Initiator?.Id == userId)
        {
            <div>
                <div class="row">
                    <div class="col-md-8 mb-4">
                        <div class="card mb-4" style=" border-width: 3.5px; border-style: solid; border-radius: 5px; border-color: #e74444;">
                            <div class="card-header py-3">
                                <h5 class="mb-0 font" style="color: black; font-size: 30px;">Biling details</h5>
                            </div>
                            <div class="card-body">
                                <form>
                                    <div class="row mb-4">
                                        <div class="col">
                                            <div class="form-outline">
                                                <label class="form-label font" for="form7Example1" style="color: #e74444; font-size: 15px;">First name</label>
                                                <input type="text" id="form7Example1" class="form-control" style="border-color: black;" @bind="firstName" />
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="form-outline">
                                                <label class="form-label font" for="form7Example2" style="color: #e74444; font-size: 15px;">Last name</label>
                                                <input type="text" id="form7Example2" class="form-control" style="border-color: black;" @bind="lastName" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label font" for="form7Example4" style="color: #e74444; font-size: 15px;">Address</label>
                                        <input type="text" id="form7Example4" class="form-control" style="border-color: black;" @bind="address" />
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label font" for="form7Example6" style="color: #e74444; font-size: 15px;">Phone</label>
                                        <input type="tel" id="form7Example6" class="form-control" style="border-color: black;" @bind="phone" />
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label font" for="form7Example7" style="color: #e74444; font-size: 15px;">Additional information</label>
                                        <textarea class="form-control" id="form7Example7" rows="4" style="border-color: black;" @bind="additionalInfo"></textarea>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4 mb-4">
                        <div class="card mb-4">
                            <div class="card-header py-3">
                                <h5 class="mb-0 font" style="color: #e74444; font-size: 25px;">Summary</h5>
                            </div>
                            <div class="card-body">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0 font" style="color: black;">
                                        Products
                                        <span class="font" style="color: black;">@order?.Total.ToString("#.##")</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center px-0 font" style="color: black;">
                                        Delivery
                                        <span class="font">FREE</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mb-3">
                                        <div class="font" style="color: black;">
                                            <strong class="font">Total amount</strong>
                                            <p class="mb-0 font">(including VAT)</p>
                                        </div>
                                        <span class="font" style="color: black;"><strong>@order?.Total.ToString("#.##")</strong></span>
                                    </li>
                                </ul>

                                <button type="button" class="btn btn-primary btn-lg btn-block font" style="background-color: white; color: #e74444; border-color: #e74444; font-weight: bold; border-width: 2px;" @onclick="@FinalizeOrder">
                                    Finalize
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public string orderId { get; set; }

    private Order order;
    private string firstName;
    private string lastName;
    private string address;
    private string phone;
    private string additionalInfo;
    private WindowDimension dimensions;

    protected override async Task OnParametersSetAsync()
    {
        dimensions = await browserService.GetDimensions();

        order = await httpClient.GetFromJsonAsync<Order>($"order/{orderId}");
    }

    private Dictionary<string, List<SelectedOrderItem>> GetItemsByUser()
    {
        var itemsByUser = new Dictionary<string, List<SelectedOrderItem>>();

        order?.Items?.ForEach(x =>
        {
            bool keyExist = itemsByUser.ContainsKey(x.SelectorId);

            if (keyExist)
                itemsByUser[x.SelectorId].Add(x);
            else
                itemsByUser.Add(x.SelectorId, new List<SelectedOrderItem> { x });
        });

        return itemsByUser;
    }

    private Dictionary<string, List<SelectedOrderItem>> GetItemsByRestaurant(string selectorId)
    {
        var items = GetItemsByUser();

        var itemsByRestaurantByUser = new Dictionary<string, List<SelectedOrderItem>>();

        items.First(x => x.Key == selectorId).Value.ForEach(x =>
        {
            bool keyExist = itemsByRestaurantByUser.ContainsKey(x.OrderItem.RestaurantId);

            if (keyExist)
                itemsByRestaurantByUser[x.OrderItem.RestaurantId].Add(x);
            else
                itemsByRestaurantByUser.Add(x.OrderItem.RestaurantId, new List<SelectedOrderItem> { x });
        });

        return itemsByRestaurantByUser;
    }

    private async Task DeleteOrderItem(SelectedOrderItem orderItem)
    {
        if(orderItem.SelectorId != userId)
        {
            Warn("You can only modify or delete your own selected products.");
            return;
        }

        var cartDto = new CartDto
        {
            OrderId = orderId,
            OrderItemId = orderItem.OrderItem.Id,
            UserId = userId,
            SelectorUserId = orderItem.SelectorId
        };

        await httpClient.PostAsJsonAsync("cart/remove", cartDto);
        order = await httpClient.GetFromJsonAsync<Order>($"order/{orderId}");
    }

    private async Task ModifyOrder(SelectedOrderItem orderItem)
    {
        if (orderItem.SelectorId != userId)
        {
            Warn("You can only modify or delete your own selected products.");
            return;
        }

        if (orderItem.OrderItem.Quantity <= 0)
        {
            Warn("Plase insert valid quantity.");
            return;
        }

        var cartDto = new CartDto
        {
            OrderId = orderId,
            OrderItemId = orderItem.OrderItem.Id,
            UserId = userId,
            SelectorUserId = orderItem.SelectorId,
            Quantity = orderItem.OrderItem.Quantity
        };

        await httpClient.PostAsJsonAsync("cart/modify", cartDto);
        order = await httpClient.GetFromJsonAsync<Order>($"order/{orderId}");
    }

    private async Task FinalizeOrder()
    {
        bool wasWarned = FinalizeWarnings();

        if(wasWarned)
            return;

        var finalizeOrderDto = new FinalizeOrderDto
        {
            OrderId = orderId,
            UserId = userId,
            FirstName = firstName,
            LastName = lastName,
            Address = address,
            Phone = phone,
            AdditionalInfo = additionalInfo
        };

        await httpClient.PostAsJsonAsync("cart/finalize", finalizeOrderDto);

        string route = $"/restaurant-browser/{orderId}/{userId}";
        navigationManager.NavigateTo(route);
    }

    private bool FinalizeWarnings()
    {
        if (string.IsNullOrEmpty(firstName))
        {
            Warn("Please insert a valid first name.");
            return true;
        }

        if (string.IsNullOrEmpty(lastName))
        {
            Warn("Please insert a valid last name.");
            return true;
        }

        if (string.IsNullOrEmpty(address))
        {
            Warn("Please insert a valid address.");
            return true;
        }

        return false;
    }

    private void Warn(string message)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.ShowCloseIcon = false;
        Snackbar.Add(message, Severity.Error);
    }

}
