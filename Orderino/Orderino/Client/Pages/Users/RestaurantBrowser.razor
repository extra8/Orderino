@page "/restaurant-browser/{orderId}/{userId}"

@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Orderino.Shared.DTOs;
@using Orderino.Shared.Models;
@using System.Text.Json

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject BrowserService browserService


<div class="container-background">
    @if (user != null && restaurants != null)
    {
        <div style="padding: 10px;">

        </div>

        <div class="restaurants-container" style="background-color: rgb(0, 0, 0, 0.4); border-radius: 10px; padding-top: 50px; padding-bottom: 70px; ">
            @foreach (var restaurant in restaurants)
            {
                <div class="restaurant-banner">
                    <div style="width: 100%; height: 83%; ">
                        <img src="@GetImage(restaurant.BannerUrl)" class="restaurant-banner-photo" @onclick="() => OpenRestaurant(restaurant)">
                    </div>
                    <div class="restaurant-text font" @onclick="() => OpenRestaurant(restaurant)">
                        @restaurant.Name
                    </div>
                </div>
            }
        </div>
    }
</div>


@code {

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public string orderId { get; set; }

    private const string logoPath = "assets/OrderinoMissingBanner.png";

    List<Restaurant> restaurants = new List<Restaurant>();
    User user;

    protected override async Task OnInitializedAsync()
    {
        var dimensions = await browserService.GetDimensions();

        user = await httpClient.GetFromJsonAsync<User>($"user/{userId}");

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out StringValues search);
        Console.WriteLine(search);

        var searchDto = new SearchDto
        {
            Search = search
        };

        var response = await httpClient.PostAsJsonAsync("restaurant/all-basic", searchDto);

        response.EnsureSuccessStatusCode();
        string content = await response.Content.ReadAsStringAsync();
        restaurants = JsonSerializer.Deserialize<List<Restaurant>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void OpenRestaurant(Restaurant restaurant)
    {
        string route = $"/restaurant/{orderId}/{restaurant.Id}/{userId}";
        navigationManager.NavigateTo(route);
    }

    private string GetImage(string imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return logoPath;

        return imageUrl;
    }

}
