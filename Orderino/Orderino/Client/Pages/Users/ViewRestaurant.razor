@page "/restaurant/{orderId}/{restaurantId}/{userId}"

@using Orderino.Shared.DTOs
@using Orderino.Shared.Models
@using System.Linq

@inject HttpClient httpClient
@inject NavigationManager navigationManager


<div class="menu-items-container-background">
    <div class="menu-container">
        @if (restaurant != null)
        {
            <div class="menu-category-header">
                <h3 class="font" style="color: white; font-weight: 700; max-height: 60px; font-size: 60px;">@restaurant.Name</h3>
            </div>

            <div style="padding-top: 2%;">
                <MudCard Style="background-color: rgba(0, 0, 0, 0);">
                    <MudCardContent>
                        <MudText Typo="Typo.body1" Style="font-weight: bold; color: #e74444; padding-bottom: 25px;" Class="font">@restaurant.Description</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: bold; color: #e74444;" Class="font">@restaurant.Address</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: bold; color: #e74444;" Class="font">@restaurant.Phone</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: bold; color: #e74444;" Class="font">@restaurant.Email</MudText>
                    </MudCardContent>
                </MudCard>
            </div>

            @foreach (string category in GetMenuCategories())
            {
                @if (GetMenuItemsForCategory(category).Count > 0)
                {
                    <div class="menu-category-header">
                        <h3 class="font" style="color: white; font-weight: 700; max-height: 40px; font-size: 40px;">@category</h3>
                    </div>

                    <div class="menu-items-container">
                        @foreach (OrderItem item in GetMenuItemsForCategory(category))
                        {
                            <MudCard Style="border-color: #e53333; border-style: solid; border-width: 3px; border-radius: 5px; min-height: 420px; max-width: 320px; ">
                                <MudCardMedia Image="@GetImage(item.ImageUrl)" Style="height: 50%; min-height: 200px; max-height: 200px;" />
                                <MudCardContent Style="height: 40%;">
                                    <MudText Typo="Typo.h5" Align="Align.Left" Style="color: black;" Class="font">@item.Name</MudText>
                                    <MudText Typo="Typo.body2" Style="color: black;" Class="font">@item.Description</MudText>
                                </MudCardContent>
                                <MudCardActions Style="position: relative; height: 10%;">
                                    <div style="position: absolute; bottom: 5px; height: 100%; padding: 0 10px 0 5px;">
                                        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr 2fr; ">
                                            <MudTextField @bind-Value="item.Quantity" Variant="Variant.Outlined" Margin="Margin.Dense" Style="color: black;" Class="font"></MudTextField>
                                            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary" OnClick="() => AddToCart(item)" />

                                            @if (user.Favorites != null && user.Favorites.Any(x => x.Id == item.Id))
                                            {
                                                <MudIconButton Icon="@Icons.Material.Filled.Star" Color="Color.Primary" OnClick="() => RemoveFromFavorites(item)" />
                                            }
                                            else
                                            {
                                                <MudIconButton Icon="@Icons.Material.Outlined.Star" Color="Color.Default" OnClick="() => AddToFavorites(item)" />
                                            }

                                            <div class="item-card-price">
                                                <MudText Typo="Typo.h6" Align="Align.Right" Style="flex: 1px; color: black;" Class="font">@item.Price lei</MudText>
                                            </div>
                                        </div>
                                    </div>
                                </MudCardActions>
                            </MudCard>
                        }
                    </div>
                }
            }
        }
    </div>
</div>


@code {

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public string restaurantId { get; set; }

    [Parameter]
    public string orderId { get; set; }

    private const string logoPath = "assets/OrderinoMissingProduct.png";

    private Restaurant restaurant;
    private User user;

    protected override async Task OnInitializedAsync()
    {
        restaurant = await httpClient.GetFromJsonAsync<Restaurant>($"restaurant/{restaurantId}");

        await AddToUserRecents();

        user = await httpClient.GetFromJsonAsync<User>($"user/{userId}");
    }

    private async Task AddToUserRecents()
    {
        var recentDto = new RecentDto
        {
            UserId = userId,
            RestaurantId = restaurantId
        };

        await httpClient.PostAsJsonAsync<RecentDto>($"recent", recentDto);
    }

    private List<string> GetMenuCategories()
    {
        List<string> categories = restaurant.Menu.Select(x => x.MenuCategory).Distinct().ToList();

        if (restaurant.MenuCategories != null && restaurant.MenuCategories.Count > 0)
        {
            var intersectedItems = restaurant.MenuCategories.Intersect(categories);
            var notIntersectedItems = categories.Except(restaurant?.MenuCategories);

            categories = intersectedItems.Concat(notIntersectedItems).ToList();
        }

        return categories;
    }

    private List<OrderItem> GetMenuItemsForCategory(string categoryName)
    {
        return restaurant.Menu.Where(x => x.MenuCategory == categoryName).ToList();
    }

    private async Task AddToCart(OrderItem item)
    {
        if (item.Quantity <= 0)
            return;

        var cartDto = new CartDto
        {
            UserId = userId,
            RestaurantId = item.RestaurantId,
            OrderItemId = item.Id,
            Quantity = item.Quantity,
            OrderId = orderId
        };

        await httpClient.PostAsJsonAsync($"cart/add", cartDto);
    }

    private async Task AddToFavorites(OrderItem item)
    {
        var favoriteDto = new FavoriteDto
        {
            UserId = userId,
            RestaurantId = item.RestaurantId,
            OrderItemId = item.Id,
        };

        await httpClient.PostAsJsonAsync($"favorites/add", favoriteDto);
        user = await httpClient.GetFromJsonAsync<User>($"user/{userId}");
    }

    private async Task RemoveFromFavorites(OrderItem item)
    {
        var favoriteDto = new FavoriteDto
        {
            UserId = userId,
            RestaurantId = item.RestaurantId,
            OrderItemId = item.Id,
        };

        await httpClient.PostAsJsonAsync($"favorites/remove", favoriteDto);
        user = await httpClient.GetFromJsonAsync<User>($"user/{userId}");
    }

    private string GetImage(string imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return logoPath;

        return imageUrl;
    }

}
