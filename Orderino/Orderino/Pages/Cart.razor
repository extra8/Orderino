@page "/cart/{orderId}/{userId}"

@using Orderino.Repository;
@using Orderino.Repository.Models;
@using Orderino.Utils;

@inject Repository<Order> orderRepository
@inject Repository<FinalizedOrder> finalizedOrderRepository
@inject Repository<Restaurant> restaurantsRepository
@inject Repository<RestaurantStatistic> restaurantStatisticRepository
@inject NavigationManager navigationManager
@inject SessionCache sessionCache


<style>
    .mud-expand-panel.mud-panel-expanded {
        margin: 8px 0;
        border-radius: inherit;
        border-bottom: none;
        transition-delay: 0ms;
    }
</style>

<div style="margin: 0 auto; width: 90vw;">
    <div style="display: grid; grid-gap: 2vh; padding: 20px; grid-template-columns: 1fr; justify-items: center;">
        @if (order != null && order.Items != null && order.Items.Count != 0)
        {
            <div style="width: 40vw; border-style: solid; border-color: #e53333; border-radius: 5px; background-color: #e53333;">

                <MudExpansionPanels MultiExpansion="true" Style="background-color: black;">

                    @foreach (var keyVal in GetItemsByUser())
                    {
                        string userFullName = keyVal.Value.First().SelectorFirstName + " " + keyVal.Value.First().SelectorLastName;

                        <MudExpansionPanel IsExpanded="true">
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Style="font-size: 32px; margin-right: 12px; color: black;"></MudIcon>
                                    <MudText Typo="Typo.h5" Class="font" Style="color: black;">@userFullName</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                @foreach (var tuple in GetItemsByRestaurant(keyVal.Value.First().SelectorId))
                                {
                                    <MudExpansionPanel IsExpanded="true">
                                        <TitleContent>
                                            <div class="d-flex">
                                                <MudText Typo="Typo.h5" Class="font" Style="color: black;">@tuple.Value.First().OrderItem.RestaurantName</MudText>
                                            </div>
                                        </TitleContent>
                                        <ChildContent>
                                            @foreach (var orderItem in keyVal.Value)
                                            {
                                                <div style="display: grid; grid-template-columns: 5fr 0.7fr 1fr;">
                                                    <div style="color: #594ae2; padding-top: 10px;">
                                                        <MudText Typo="Typo.h6" Style="color: #e74444; font-weight:bold;" Class="font"> @orderItem.OrderItem.Name </MudText>
                                                    </div>
                                                    <MudTextField @bind-Value="orderItem.OrderItem.Quantity" Variant="Variant.Outlined" Style="color: black; border-color: #e74444; border-width: 1px; border-style: solid; border-radius: 5px;" Margin="Margin.Dense" @onfocusout="(x) => ModifyOrder(x)"></MudTextField>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Style="color: #e74444" @onclick="() => DeleteOrderItem(orderItem.OrderItem.Id)"></MudIconButton>
                                                </div>
                                            }
                                        </ChildContent>
                                    </MudExpansionPanel>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </div>
        }
        @if (true)
        {
            <div style="width: 40vw;">
                <div class="row">
                    <div class="col-md-8 mb-4">
                        <div class="card mb-4" style=" border-width: 3.5px; border-style: solid; border-radius: 5px; border-color: #e74444;">
                            <div class="card-header py-3">
                                <h5 class="mb-0 font" style="color: black; font-size: 30px;">Biling details</h5>
                            </div>
                            <div class="card-body">
                                <form>
                                    <div class="row mb-4">
                                        <div class="col">
                                            <div class="form-outline">
                                                <label class="form-label font" for="form7Example1" style="color: #e74444; font-size: 15px;">First name</label>
                                                <input type="text" id="form7Example1" class="form-control" style="border-color: black;" @bind="firstName" />
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="form-outline">
                                                <label class="form-label font" for="form7Example2" style="color: #e74444; font-size: 15px;">Last name</label>
                                                <input type="text" id="form7Example2" class="form-control" style="border-color: black;" @bind="lastName" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label font" for="form7Example4" style="color: #e74444; font-size: 15px;">Address</label>
                                        <input type="text" id="form7Example4" class="form-control" style="border-color: black;" @bind="address" />
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label font" for="form7Example6" style="color: #e74444; font-size: 15px;">Phone</label>
                                        <input type="tel" id="form7Example6" class="form-control" style="border-color: black;" @bind="phone" />
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label font" for="form7Example7" style="color: #e74444; font-size: 15px;">Additional information</label>
                                        <textarea class="form-control" id="form7Example7" rows="4" style="border-color: black;" @bind="additionalInfo"></textarea>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4 mb-4">
                        <div class="card mb-4">
                            <div class="card-header py-3">
                                <h5 class="mb-0" style="color: #e74444; font-size: 25px;">Summary</h5>
                            </div>
                            <div class="card-body">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0" style="color: black;">
                                        Products
                                        <span style="color: black;">@order?.Total.ToString("#.##")</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center px-0" style="color: black;">
                                        Delivery
                                        <span>FREE</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mb-3">
                                        <div style="color: black;">
                                            <strong>Total amount</strong>
                                            <p class="mb-0">(including VAT)</p>
                                        </div>
                                        <span style="color: black;"><strong>@order?.Total.ToString("#.##")</strong></span>
                                    </li>
                                </ul>

                                <button type="button" class="btn btn-primary btn-lg btn-block font" style="background-color: white; color: #e74444; border-color: #e74444; font-weight: bold; border-width: 2px;" @onclick="@FinalizeOrder">
                                    Finalize
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public string orderId { get; set; }

    private Order order;
    private string firstName;
    private string lastName;
    private string address;
    private string phone;
    private string additionalInfo;

    protected override async Task OnParametersSetAsync()
    {
        order = await orderRepository.QueryItemAsync(orderId);
    }

    private Dictionary<string, List<SelectedOrderItem>> GetItemsByUser()
    {
        var itemsByUser = new Dictionary<string, List<SelectedOrderItem>>();

        order?.Items?.ForEach(x =>
        {
            bool keyExist = itemsByUser.ContainsKey(x.SelectorId);

            if (keyExist)
                itemsByUser[x.SelectorId].Add(x);
            else
                itemsByUser.Add(x.SelectorId, new List<SelectedOrderItem> { x });
        });

        return itemsByUser;
    }

    private Dictionary<string, List<SelectedOrderItem>> GetItemsByRestaurant(string selectorId)
    {
        var items = GetItemsByUser();

        var itemsByRestaurantByUser = new Dictionary<string, List<SelectedOrderItem>>();

        items.First(x => x.Key == selectorId).Value.ForEach(x =>
        {
            bool keyExist = itemsByRestaurantByUser.ContainsKey(x.OrderItem.RestaurantId);

            if (keyExist)
                itemsByRestaurantByUser[x.OrderItem.RestaurantId].Add(x);
            else
                itemsByRestaurantByUser.Add(x.OrderItem.RestaurantId, new List<SelectedOrderItem> { x });
        });

        return itemsByRestaurantByUser;
    }

    private async Task DeleteOrderItem(string orderItemId)
    {
        var canModify = order.Items.Any(x => x.SelectorId == userId && x.OrderItem.Id == orderItemId);

        if (canModify)
        {
            var currentOrder = await orderRepository.QueryItemAsync(orderId);
            currentOrder.Items.RemoveAll(x => x.SelectorId == userId && x.OrderItem.Id == orderItemId);

            await orderRepository.Update(currentOrder);
            order = currentOrder;
        }
    }

    private async Task ModifyOrder(FocusEventArgs args)
    {
        var currentUserItems = order.Items.Where(x => x.SelectorId == userId).ToList();

        var currentOrder = await orderRepository.QueryItemAsync(orderId);
        currentOrder.Items.RemoveAll(x => x.SelectorId == userId);
        currentOrder.Items.AddRange(currentUserItems);

        await orderRepository.Update(currentOrder);
        order = currentOrder;
    }

    private async Task FinalizeOrder()
    {
        order = await orderRepository.QueryItemAsync(orderId);
        var finalizedOrdersCollection = await finalizedOrderRepository.QueryItemAsync(order.Id);

        if (finalizedOrdersCollection.Orders == null)
            finalizedOrdersCollection.Orders = new List<Order>();

        finalizedOrdersCollection.Id = order.Id;
        order.FinalizedId = Guid.NewGuid().ToString();
        order.FinalizedTime = DateTime.UtcNow;
        order.DeliveryPhone = phone;
        order.DeliveryAddress = new DeliveryAddress
        {
            FirstName = firstName,
            LastName = lastName,
            Address = address,
            Phone = phone,
            AditionalInfo = additionalInfo
        };

        finalizedOrdersCollection.Orders.Add(order);

        await finalizedOrderRepository.Update(finalizedOrdersCollection);
        await orderRepository.Delete(order);

        var restaurantIds = order.Items.Select(x => x.OrderItem.RestaurantId).Distinct().ToList();
        var restaurantStatistics = await restaurantStatisticRepository.QueryAllItemsAsync(restaurantIds);
        var restaurants = await restaurantsRepository.QueryAllItemsAsync(restaurantIds);

        foreach (string id in restaurantIds)
        {
            var statistic = restaurantStatistics.FirstOrDefault(x => x.Id == id);

            if (statistic == null)
            {
                var restaurant = restaurants.FirstOrDefault(x => x.Id == id);

                var newStatistic = new RestaurantStatistic
                {
                    Id = id,
                    HistoricalMenu = new List<OrderItem>(),
                    History = new List<Tuple<string, DateTime, int>>(),
                    Name = restaurant.Name,
                    Address = restaurant.Address,
                    Phone = restaurant.Phone,
                    Email = restaurant.Email
                };
                restaurantStatistics.Add(newStatistic);
            }
        }

        var now = DateTime.UtcNow;
        foreach (var item in order.Items)
        {
            var statistic = restaurantStatistics.FirstOrDefault(x => x.Id == item.OrderItem.RestaurantId);

            if (statistic.HistoricalMenu == null)
                statistic.HistoricalMenu = new List<OrderItem>();

            if (statistic.History == null)
                statistic.History = new List<Tuple<string, DateTime, int>>();

            if (statistic.HistoricalMenu.Count(x => x.Id == item.OrderItem.Id) == 0)
                statistic.HistoricalMenu.Add(item.OrderItem);

            statistic.History.Add(Tuple.Create<string, DateTime, int>(item.OrderItem.Id, now, item.OrderItem.Quantity));
        }

        await restaurantStatisticRepository.BulkAddAsync(restaurantStatistics);

        string route = $"/restaurant-browser/{orderId}/{userId}";
        navigationManager.NavigateTo(route);
    }
}
