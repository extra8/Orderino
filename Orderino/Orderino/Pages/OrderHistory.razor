@page "/history/{orderId}/{userId}"

@using Orderino.Repository;
@using Orderino.Repository.Models;
@using Newtonsoft.Json;
@using System.Linq;

@inject Repository<FinalizedOrder> finalizedOrderRepository
@inject Repository<Order> orderRepository
@inject Repository<User> userRepository
@inject NavigationManager navigationManager

<div style=" margin: 0 auto; width: 70vw; padding-top: 50px;">
    <h3 class="font" style="color: white; font-size: 40px;">Order History</h3>

    <div style="padding-top: 3%; display: grid; grid-template-columns: auto auto auto; justify-content: center; align-content: space-between; ">

        <div style="padding-top: 12px; padding-right: 30px;">
            <select style="border-color: #e74444; background-color: black; border-style: solid; border-radius: 8px; width: 28vw; font-size: 20px; padding: 10px; color: #e74444;" @bind="@selectedOrderId">
                <option value=""></option>
                @if (finalizedOrder != null && finalizedOrder.Orders != null)
                {
                    @foreach (var order in finalizedOrder.Orders)
                    {
                        <option value="@order.FinalizedId">@order.FinalizedTime?.ToString("dddd, dd MMMM yyyy HH:mm")</option>
                    }
                }
            </select>
        </div>

        <div style="">
            <button class="btn btn-outline-light btn-lg px-5" type="submit" @onclick="ViewOrder" style="margin: 10px; color: #e74444; border-color: #e74444; font-weight: bold; border-width: 2px;">View</button>
        </div>

        <div style="">
            <button class="btn btn-outline-light btn-lg px-5" type="submit" @onclick="Reorder" style="margin: 10px; color: #e74444; border-color: #e74444; font-weight: bold; border-width: 2px;">Reorder</button>
        </div>
    </div>

    @if (showOrder)
    {
        <div style="padding-top: 30px;">
            <div style="width: 60%; margin-left: 20%; border-style: solid; border-color: #e53333; border-radius: 5px;">
                <MudExpansionPanels MultiExpansion="true" Style="background-color: black;">

                    @foreach (var keyVal in GetItemsByUser())
                    {
                        string userFullName = keyVal.Value.First().SelectorFirstName + " " + keyVal.Value.First().SelectorLastName;

                        <MudExpansionPanel IsExpanded="true">
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Style="font-size: 32px; margin-right: 12px; color: black;"></MudIcon>
                                    <MudText Typo="Typo.h5" Class="font">@userFullName</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                @foreach (var orderItem in keyVal.Value)
                                {
                                    <div style="display: grid; grid-template-columns: 5fr 1fr;">
                                        <div style="color: #594ae2; padding-top: 10px;">
                                            <MudText Typo="Typo.h6" Style="color: #e74444; font-weight:bold;" Class="font"> @orderItem.OrderItem.Name </MudText>
                                        </div>
                                        <div style="color: #594ae2; padding-top: 10px;">
                                            <MudText Typo="Typo.h6" Style="color: #e74444; font-weight: bold; float: right; padding-right: 30px;" Class="font"> @orderItem.OrderItem.Quantity </MudText>
                                        </div>
                                    </div>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                    }

                </MudExpansionPanels>
            </div>
        </div>
    }

</div>


@code {

    [Parameter]
    public string orderId { get; set; }

    [Parameter]
    public string userId { get; set; }

    private FinalizedOrder finalizedOrder;
    private User user;
    private string selectedOrderId;
    private Order selectedOrder;
    private bool showOrder;

    protected override async Task OnInitializedAsync()
    {
        finalizedOrder = await finalizedOrderRepository.QueryItemAsync(orderId);
        user = await userRepository.QueryItemAsync(userId);
    }

    private void ViewOrder()
    {
        if (string.IsNullOrEmpty(selectedOrderId))
            return;

        selectedOrder = finalizedOrder.Orders.First(x => x.FinalizedId == selectedOrderId);
        showOrder = true;
    }

    private Dictionary<string, List<SelectedOrderItem>> GetItemsByUser()
    {
        var itemsByUser = new Dictionary<string, List<SelectedOrderItem>>();

        finalizedOrder?.Orders?.First(x => x.FinalizedId == selectedOrderId).Items?.ForEach(x =>
        {
            bool keyExist = itemsByUser.ContainsKey(x.SelectorId);

            if (keyExist)
                itemsByUser[x.SelectorId].Add(x);
            else
                itemsByUser.Add(x.SelectorId, new List<SelectedOrderItem> { x });
        });

        return itemsByUser;
    }

    private async Task Reorder()
    {
        var finalizedOrderCollection = await finalizedOrderRepository.QueryItemAsync(orderId);

        if (finalizedOrderCollection == null || finalizedOrder.Orders == null)
            return;

        var orderToReOrder = finalizedOrderCollection.Orders.FirstOrDefault(x => x.FinalizedId == selectedOrderId);

        if (orderToReOrder == null)
            return;

        var serialized = JsonConvert.SerializeObject(orderToReOrder);
        var newOrder = JsonConvert.DeserializeObject<Order>(serialized);
        newOrder.Initiator = user;
        newOrder.Initiator.Favorites = null;
        newOrder.FinalizedId = null;
        newOrder.FinalizedTime = null;

        await orderRepository.Upsert(newOrder);

        navigationManager.NavigateTo($"cart/{orderId}/{userId}", forceLoad: true);
    }

}
