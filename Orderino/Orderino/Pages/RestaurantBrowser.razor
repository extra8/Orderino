@page "/restaurant-browser/{orderId}/{userId}"

@using Orderino.Repository;
@using Orderino.Repository.Models;
@using Orderino.Utils;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives; 

@inject Repository<Restaurant> restaurantRepository
@inject Repository<User> userRepository
@inject NavigationManager navigationManager
@inject SessionCache sessionCache 
@inject Microsoft.JSInterop.IJSRuntime JsRuntime


<div class="container-background">
    @if (user != null && restaurants != null)
    {
        <div style="padding: 35px;">
            
        </div>

        <div class="restaurants-container" style="background-color: rgb(0, 0, 0, 0.4); border-radius: 10px; padding-top: 50px; padding-bottom: 70px; ">
            @foreach (var restaurant in restaurants)
            {
                <div class="restaurant-banner">
                    <div style="width: 100%; height: 83%; ">
                        <img src="@GetBannerImage(restaurant.BannerString)" class="restaurant-banner-photo" @onclick="() => OpenRestaurant(restaurant)">
                    </div>
                    <div class="restaurant-text font" @onclick="() => OpenRestaurant(restaurant)">
                        @restaurant.Name
                    </div>
                </div>
            }
        </div>
    }
</div>


@code {

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public string orderId { get; set; }

    List<Restaurant> restaurants = new List<Restaurant>();
    User user;

    bool firstDiv = true;

    protected override async Task OnInitializedAsync()
    {
        user = await userRepository.QueryItemAsync(userId);

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out StringValues search);

        if (string.IsNullOrWhiteSpace(search))
        {
            restaurants = await restaurantRepository.QueryAllItemsAsync();
        }
        else
        {
            restaurants = await restaurantRepository.QueryByFieldName("Name", search);
        }
    }

    private void OpenRestaurant(Restaurant restaurant)
    {
        sessionCache.Add(restaurant.Id, restaurant);

        string route = $"/restaurant/{orderId}/{restaurant.Id}/{userId}";
        navigationManager.NavigateTo(route);
    }

    private string GetBannerImage(string bannerString)
    {
        return string.Format("{0}", bannerString);
    }
}
